name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

# Sets permissions of the GITHUB_TOKEN to allow deployment and releases
permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test build
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          echo "Build successful - dist directory exists"

      - name: Bump version
        run: |
          # Use input release_type if available (manual trigger), otherwise default to patch
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          
          if [ "$RELEASE_TYPE" = "patch" ]; then
            npm run version:patch
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            npm run version:minor
          elif [ "$RELEASE_TYPE" = "major" ]; then
            npm run version:major
          fi

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the new version from package.json
          NEW_VERSION=$(node -p 'require("./package.json").version')

          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since the previous tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi

          # Create changelog
          CHANGELOG="## What's Changed in v$NEW_VERSION

          $COMMITS

          ## Installation

          You can install this as a PWA on supported devices or use it directly in your browser.

          ## Full Changelog

          See the [commit history](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$NEW_VERSION) for all changes."

          # Save to file for the next step
          echo "$CHANGELOG" > CHANGELOG.md

          # Also output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          # Add changelog to the version commit
          git add CHANGELOG.md
          git commit --amend --no-edit

          # Push the version commit and tag
          VERSION=$(node -p 'require("./package.json").version')
          git push origin main
          git push origin "v$VERSION"

      - name: Create Release
        id: create_release
        run: |
          VERSION=$(node -p 'require("./package.json").version')
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "${{ steps.changelog.outputs.changelog }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
